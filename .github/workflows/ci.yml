name: Orbita OS CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Rust nightly
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: nightly
        override: true
        components: rustfmt, clippy, rust-src
    
    - name: Check formatting
      run: cargo fmt -- --check
    
    - name: Run Clippy
      run: cargo clippy -- -D warnings

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Rust nightly
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: nightly
        override: true
        components: rust-src, llvm-tools-preview
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y qemu-system-x86
        cargo install bootimage
    
    - name: Build kernel
      run: cargo build --release
    
    - name: Build bootimage
      run: cargo bootimage

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Rust nightly
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: nightly
        override: true
        components: rust-src, llvm-tools-preview
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y qemu-system-x86
        cargo install bootimage
    
    - name: Run tests
      run: cargo test
    
    - name: Run boot test
      run: |
        timeout 10s cargo run || exit_code=$?
        if [ $exit_code -eq 124 ]; then
          echo "Boot test succeeded (timeout as expected)"
          exit 0
        else
          echo "Boot test failed"
          exit 1
        fi

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./docker/Dockerfile
        push: false
        tags: orbita-os:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker build
      run: |
        docker run --rm orbita-os:latest cargo build --release

  documentation:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Rust nightly
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: nightly
        override: true
    
    - name: Build documentation
      run: cargo doc --no-deps
    
    - name: Check documentation completeness
      run: |
        # Проверяем, что все публичные элементы документированы
        cargo doc --no-deps -- -D warnings